{"version":3,"sources":["components/Etapa1.js","components/Etapa2.js","components/Etapa3.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["Labels","styled","label","Button","button","Etapa1","type","value","onClick","this","props","mudarTela","React","Component","Etapa2","mudarTela2","Etapa3","mudarTela3","Final","AppDiv","div","App","state","tela","onClickProximaEtapa","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ydAGA,IAAMA,EAASC,IAAOC,MAAV,KAKNC,EAASF,IAAOG,OAAV,KAsCGC,E,uKA/BX,OACI,6BACE,sDACA,6BACE,kBAACL,EAAD,4BACA,2BAAOM,KAAK,UAEd,6BACE,kBAACN,EAAD,2BACA,2BAAOM,KAAK,UAEd,6BACE,kBAACN,EAAD,2BACA,2BAAOM,KAAK,UAEd,6BACE,kBAACN,EAAD,oCACA,gCACI,4BAAQO,MAAM,iBAAd,8BACA,4BAAQA,MAAM,eAAd,4BACA,4BAAQA,MAAM,iBAAd,8BACA,4BAAQA,MAAM,eAAd,8BAGN,kBAACJ,EAAD,CAAQK,QAASC,KAAKC,MAAMC,WAA5B,yB,GA3BWC,IAAMC,W,kMCT3B,IAAMb,EAASC,IAAOC,MAAV,KAKNC,EAASF,IAAOG,OAAV,KAwBGU,E,uKAjBX,OACE,6BACE,8EACA,6BACE,kBAAC,EAAD,yDACA,2BAAOR,KAAK,UAEd,6BACE,kBAAC,EAAD,2BACA,2BAAOA,KAAK,UAEd,kBAAC,EAAD,CAAQE,QAASC,KAAKC,MAAMK,YAA5B,yB,GAbaH,IAAMC,W,kMCV3B,IAAMb,EAASC,IAAOC,MAAV,KAKNC,EAASF,IAAOG,OAAV,KA4BGY,E,uKArBX,OACI,6BACA,4EACA,6BACI,kBAAC,EAAD,wEACA,2BAAOV,KAAK,UAEhB,6BACI,kBAAC,EAAD,iDACA,gCACE,0CACA,oDACA,wDAGN,kBAAC,EAAD,CAAQE,QAASC,KAAKC,MAAMO,YAA5B,yB,GAjBaL,IAAMC,WCAZK,E,uKATX,OACE,6BACE,sDACA,yF,GALYN,IAAMC,W,8FCM1B,IAAMM,EAASlB,IAAOmB,IAAV,KA8CGC,E,4MAzCbC,MAAQ,CACNC,KAAM,G,EAGRC,oBAAsB,WACpB,EAAKC,SAAS,CACZF,KAAM,EAAKD,MAAMC,KAAO,K,uDAK1B,OAAuB,IAApBd,KAAKa,MAAMC,KAEV,kBAACJ,EAAD,KACE,kBAAC,EAAD,CAAQR,UAAWF,KAAKe,uBAIF,IAApBf,KAAKa,MAAMC,KAEf,kBAACJ,EAAD,KACE,kBAAC,EAAD,CAASJ,WAAYN,KAAKe,uBAIL,GAAnBf,KAAKa,MAAMC,KAEf,kBAACJ,EAAD,KACE,kBAAC,EAAD,CAAQF,WAAYR,KAAKe,uBAM3B,kBAACL,EAAD,KACE,kBAAC,EAAD,W,GApCQP,IAAMC,WCAJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aeac2b59.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Labels = styled.label`\r\n  display: block;\r\n  margin: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 10px;\r\n`;\r\n\r\nclass Etapa1 extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n        <div>\r\n          <h2>ETAPA 1 - DADOS GERAIS</h2>\r\n          <div>\r\n            <Labels>1. Qual o seu nome?</Labels>\r\n            <input type='text'/>\r\n          </div>\r\n          <div>\r\n            <Labels>2. Qual sua idade?</Labels>\r\n            <input type='text'/>\r\n          </div>\r\n          <div>\r\n            <Labels>3. Qual seu email?</Labels>\r\n            <input type='text'/>\r\n          </div>\r\n          <div>\r\n            <Labels>1. Qual a sua escolaridade?</Labels>\r\n            <select>\r\n                <option value=\"medIncompleto\">Ensino Médio Incompleto</option>\r\n                <option value=\"medCompleto\">Ensino Médio Completo</option>\r\n                <option value=\"supIncompleto\">Ensino Superior Incompleto</option>\r\n                <option value=\"supCompleto\">Ensino Superior Completo</option>\r\n            </select>\r\n          </div>\r\n          <Button onClick={this.props.mudarTela}>Próxima Etapa</Button>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Etapa1;","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Labels = styled.label`\r\n  display: block;\r\n  margin: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 10px;\r\n`;\r\n\r\n\r\nclass Etapa2 extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>ETAPA 2 - INFORMAÇÕES DO ENSINO SUPERIOR</h2>\r\n        <div>\r\n          <Labels>5. Por que você não terminou um curso de ?</Labels>\r\n          <input type='text'/>\r\n        </div>\r\n        <div>\r\n          <Labels>6. Qual sua idade?</Labels>\r\n          <input type='text'/>\r\n        </div>\r\n        <Button onClick={this.props.mudarTela2}>Próxima Etapa</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Etapa2;","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Labels = styled.label`\r\n  display: block;\r\n  margin: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 10px;\r\n`;\r\n\r\n\r\nclass Etapa3 extends React.Component{\r\n  render(){\r\n    return(\r\n        <div>\r\n        <h2>ETAPA 3 - INFORMAÇÕES GERAIS DE ENSINO</h2>\r\n        <div>\r\n            <Labels>5. Por que você não terminou um curso de graduação?</Labels>\r\n            <input type='text'/>\r\n        </div>\r\n        <div>\r\n            <Labels>6. Você fez algum curso complementar?</Labels>\r\n            <select>\r\n              <option>Nenhum</option>\r\n              <option>Curso Técnico</option>\r\n              <option>Curso de Inglês</option>\r\n            </select>\r\n        </div>\r\n        <Button onClick={this.props.mudarTela3}>Próxima Etapa</Button>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Etapa3;","import React from 'react'\r\n\r\nclass Final extends React.Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>O FORMULÁRIO ACABOU</h2>\r\n        <p>Muito obrigado por participar! Entraremos em contato!</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Final;","import React from 'react';\nimport './App.css';\nimport styled from'styled-components';\nimport Etapa1 from './components/Etapa1';\nimport Etapa2 from './components/Etapa2';\nimport Etapa3 from './components/Etapa3';\nimport Final from './components/Final';\n\nconst AppDiv = styled.div`\n  text-align: center;\n`;\n\nclass App extends React.Component {\n  state = {\n    tela: 1\n  }\n\n  onClickProximaEtapa = () => {\n    this.setState({\n      tela: this.state.tela + 1\n    })\n  }\n\n  render(){\n    if(this.state.tela === 1){\n      return (\n        <AppDiv>\n          <Etapa1 mudarTela={this.onClickProximaEtapa}/>\n        </AppDiv>\n      );\n    }\n    else if(this.state.tela === 2){\n      return (\n        <AppDiv>\n          <Etapa2  mudarTela2={this.onClickProximaEtapa}/>\n        </AppDiv>\n      );\n    }\n    else if(this.state.tela == 3) {\n      return (\n        <AppDiv>\n          <Etapa3 mudarTela3={this.onClickProximaEtapa}/>\n        </AppDiv>\n      );\n    }\n    else{\n      return(\n        <AppDiv>\n          <Final />\n        </AppDiv>\n      )\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}